/////O(n^lg3) 카라츠바의 빠른 정수 곱셈 알고리즘
void addTo(vector<int> &a, const vector<int>& b, int k) //a += b(10^k)
void subFrom(vector<int> &a, const vector<int>& b); //a -= b

vector<int> karatsuba(const vector<int>& a, const vector<int>&b){
	int an = a.size();, bn=b.size();

	if(an < bn) return karatsuba(b,a);

	if(an == 0 || bn== 0 ) return vector<int>();

	if(an <= 50) return multiply(a,b); 

	//a와 b를 밑에서 half 자리와 나머지로 분리한다.
	int half = an/2;
	vector<int> a0(a.begin(), a.begin() + half);
	vector<int> a1(a.begin() + half, a.end());
	vector<int> b0(b.begin(), b.begin() + min<int>(b.size(),half));
	vector<int> b1(b.begin() + min<int>(b.size(),half), b.end());

	vector<int> z2 = karatsuba(a1, b1);
	vector<int> z0 = karatsuba(a0, b0);
	addTo(a0, a1, 0);
	addTo(b0, b1, 0);

	vector<int> z1 = karatsuba(a0, b0);
	subFrom(z1, z0);
	subFrom(z1, z2);

	vector<int> ret;
	addTo(ret, z0, 0);
	addTo(ret, z1, half);
	addTo(ret, z2, half + half));
	return ret;
}

//////////////////////////에라토스테네스의 체를 이용한 빠른 소인수 분해

int minFactor[MAX_N};

void eratosthenes2(){
	minFactor[0] = minFactor[1] = -1;

	for(int i= 2; i<=n; ++i)
		minFactor[i] = i;

	int sqrtn = int(sqrt(n));
	for(int i = 2; i<= sqrtn; ++i){
		if(minFactor[i] == i){
			for(int j = i*i; j<=n j+=i)
				if(minFactor[j] == j)
					minFactor[j] = i;
		}
	}
}

vector<int> factor(int n) {
	vector<int> ret;

	while(n > 1){
		ret.push_back(minFactor[n]);
		n /= minFactor[n];
	}
	return ret;
}

////////////////////// 유클리드 알고리즘 (최대공약수)

int gcd(int p, int q){
	return q ==0 ? p : gcd(q, p % q);
}

<<<<<<< HEAD

////////////////////// a / b 보다 큰 최소 정수

int ceil(int a, int b){
	return (a + b - 1) / b;
}

<<<<<<< HEAD
=======
>>>>>>> origin/master
////////////////KMP 알고리즘
vector<int> getPartialMatch(const string& pat){
	int m = pat.size();
	vector<int> failf(m, 0);

	int begin = 1, matched = 0;

	while(begin + matched <m){
		if(pat[begin + matched] == pat[matched]){
			++matched;
			failf[begin + matched -1] = matched;
		}
		else {
			if(matched == 0)
				++begin;
			else {
				begin += matched - failf[matched - 1];
				matched = failf[matched - 1];
			}
		}
	}
	return failf;
}



vector<int> kmpSearch(const string& txt, const string& pat){
	int n = txt.size(), m = pat.size();
	vector<int> ret;
	
	vector<int> failf = getPartialMatch(pat);

	int begin = 0, matched = 0;
	while(begin <= n- m) {
		if(matched < m && txt[begin + matched] == pat[matched]){
			++matched;
			
			if(matched == m) 
				ret.push_back(begin);
		}
		else{
			if(matched == 0)
				++begin;
			else{
				begin += matched - failf[matched-1];
				
				matched = failf[matched -1];
			}
		}
	}	
	return ret;
}



/////////////////접미사 배열을 계산하는 맨버와 마이어스의 알고리즘
struct Comparator {
	const vector<int>& group;
	int t;
	Comparator(const vector<int>& _group, int _t) : group(_group), t(_t) {}

	bool operator () (int a, int b){
		if (group[a] != group[b]) return group[a] < group[b];

		return group[a + t] < group[b + t];
	}
};

vector<int> getSuffixArray(const string& s){
	int n = s.size();

	int t = 1;
	vector<int> group(n + 1);
	for (int i = 0; i < n; ++i)
		group[i] = s[i];

	group[n] = -1;

	vector<int> perm(n);
	for (int i = 0; i < n; i++)
		perm[i] = i;

	while (t < n){

		Comparator compareUsing2T(group, t);
		sort(perm.begin(), perm.end(), compareUsing2T);
		for (int i = 0; i < group.size(); i++)
			cout << group[i] << " ";
		cout << endl;

		t *= 2;
		if (t >= n) break;

		vector<int> newGroup(n + 1);
		newGroup[n] = -1;
		newGroup[perm[0]] = 0;
		for (int i = 1; i < n; i++){
			if (compareUsing2T(perm[i - 1], perm[i]))
				newGroup[perm[i]] = newGroup[perm[i - 1]] + 1;
			else
				newGroup[perm[i]] = newGroup[perm[i - 1]];
		}
		group = newGroup;
	}
	return perm;
}


//////////////trip 트립

typedef int KeyType;

struct Node{
	KeyType key;

	int priority, size;
	Node *left, *right;
	Node(const KeyType& _key) : key(_key), priority(rand()),
		size(1), left(NULL), right(NULL){
	}
	void setLeft(Node* newLeft)
	{
		left = newLeft;
		calcSize();
	}

	void setRight(Node* newRight){
		right = newRight;
		calcSize();
	}
	void calcSize(){
		size = 1;
		if (left) size += left->size;
		if (right) size += right->size;
	}
};

typedef pair<Node*, Node*> NodePair;

NodePair split(Node* root, KeyType key){
	if (root == NULL) return NodePair(NULL, NULL);

	if (root->key < key){
		NodePair rs = split(root->right, key);
		root->setRight(rs.first);
		return NodePair(root, rs.second);
	}
	NodePair ls = split(root->left, key);
	root->setLeft(ls.second);
	return NodePair(ls.first, root);
}

Node* insert(Node* root, Node* node){
	if (root == NULL) return node;

	if (root->priority < node->priority){
		NodePair splitted = split(root, node->key);
		node->setLeft(splitted.first);
		node->setRight(splitted.second);
		return node;
	}
	else if (node->key < root->key)
		root->setLeft(insert(root->left, node));
	else
		root->setRight(insert(root->right, node));
	return root;
}

Node* merge(Node* a, Node* b){
	if (a == NULL) return b;
	if (b == NULL) return a;
	if (a->priority < b->priority){
		b->setLeft(merge(a, b->left));
		return b;
	}
	a->setRight(merge(a->right, b));
	return a;
}

Node* erase(Node* root, KeyType key){
	if (root == NULL) return root;

	if (root->key == key){
		Node* ret = merge(root->left, root->right);
		delete root;
		return ret;
	}
	if (key < root->key)
		root->setLeft(erase(root->left, key));
	else
		root->setRight(erase(root->right, key));
	return root;
}

Node* kth(Node* root, int k){

	int leftSize = 0;
	if (root->left != NULL) leftSize = root->left->size;
	if (k <= leftSize) return kth(root->left, k);
	if (k == leftSize + 1) return root;
	return kth(root->right, k - leftSize - 1);
}

int countLessThan(Node* root, KeyType key){
	if (root == NULL) return 0;
	if (root->key >= key)
		return countLessThan(root->left, key);
	int ls = (root->left ? root->left->size : 0);
	return ls + 1 + countLessThan(root->right, key);
}

///////// 구간트리 range minimum query, RMQ
const int INT_MAXX = numeric_limits<int>::max(); //INT_MAX 는 예약어 이미 정의되어 있음.
struct RMQ {
	int n;

	vector<int> rangeMin;
	RMQ(const vector<int>& array){
		n = array.size();
		rangeMin.resize(n * 4);
		init(array, 0, n - 1, 1);
	}

	int init(const vector<int>& array, int left, int right, int node){
		if (left == right)
			return rangeMin[node] = array[left];
		int mid = (left + right) / 2;
		int leftMin = init(array, left, mid, node * 2);
		int rightMin = init(array, mid + 1, right, node * 2 + 1);
		return rangeMin[node] = min(leftMin, rightMin);
	}

	int query(int left, int right, int node, int nodeLeft, int nodeRight){
		if (right < nodeLeft || nodeRight < left)
			return INT_MAXX;
		if (left <= nodeLeft && nodeRight <= right)
			return rangeMin[node];

		int mid = (nodeLeft + nodeRight) / 2;
		return min(query(left, right, node * 2, nodeLeft, mid),
			query(left, right, node * 2 + 1, mid + 1, nodeRight));
	}
	//외부에서 호출하기 위해
	int query(int left, int right){
		return query(left, right, 1, 0, n - 1);
	}

	int update(int index, int newValue, int node, int nodeLeft, int nodeRight){
		if (index < nodeLeft || nodeRight < index)
			return rangeMin[node];

		if (nodeLeft == nodeRight) return rangeMin[node] = newValue;
		int mid = (nodeLeft + nodeRight) / 2;
		return rangeMin[node] = min(
			update(index, newValue, node * 2, nodeLeft, mid),
			update(index, newValue, node * 2 + 1, mid + 1, nodeRight));
	}

	//외부에서 호출하기 위해
	int update(int index, int newValue){
		return update(index, newValue, 1, 0, n - 1);
	}

};

///////fenwick tree 펜윅트리, binary indexed tree;
struct FenwickTree{
	//원소가 전부 0이라고 생각한다.
	vector<int> tree;
	FenwickTree(int n) : tree(n + 1) {}

	int sum(int pos){
		++pos;
		int ret = 0;
		while (pos > 0){
			ret += tree[pos];
			pos &= (pos - 1);
		}
		return ret;
	}

	void add(int pos, int val){
		++pos;
		while (pos < tree.size()){
			tree[pos] += val;
			pos += (pos & -pos);
		}
	}
};

//////////union fine set 유니온 파인드
struct OptimizedDisjointSet {
	vector<int> parent, rank;
	OptimizedDisjointSet(int n) : parent(n), rank(n, 1){
		for (int i = 0; i < n; i++)
			parent[i] = i;
	}

	int find(int u){
		if (u == parent[u]) return u;
		return parent[u] = find(parent[u]);
	}

	void merge(int u, int v){
		u = find(u);
		v = find(v);

		if (u == v) return;
		if (rank[u] > rank[v]) swap(u, v);

		parent[u] = v;
		if (rank[u] == rank[v]) ++rank[v];
	}
};


////////trie 트라이
const int ALPHABETS = 26;
int toNumber(char ch) {
	return ch - 'A';
}

struct  TrieNode{
	TrieNode* children[ALPHABETS];

	bool terminal;
	TrieNode() : terminal(false) {
		memset(children, 0, sizeof(children));
	}
	~TrieNode() {
		for (int i = 0; i < ALPHABETS; i++)
		if (children[i])
			delete children[i];
	}

	void insert(const char* key){
		if (*key == 0)
			terminal = true;
		else {
			int next = toNumber(*key);
			if (children[next] == NULL)
				children[next] = new TrieNode();

			children[next]->insert(key + 1);
		}

	}

	TrieNode* find(const char* key) {
		if (*key == 0) return this;
		int next = toNumber(*key);
		if (children[next] = NULL) return NULL;
		return children[next]->find(key + 1);
	}
};



///////////오일러 서킷
vector<vector<int> > adj

void getEulerCircuit(int here, vector<int>& circuit) {
	for (int there = 0; there < adj.size(); there++){
		while (adj[here][there] > 0){
			adj[here][there]--;
			adj[there][here]--;
			getEulerCircuit(there, circuit);
		}
	}
	circuit.push_back(here); //방문 역순으로 저장됨
}

//오일러 트레일은 오일러 서킷처럼 그래프의 모든 간선을 정확히 한 번씩 지나지만,
//시작점과 끝점이 다른 경로를 오일러 트레일 이라고 부른다.
//a에서 시작 b에서 끝난다면 간선(b,a)를 추가해서 서킷 알고리즘을 돌리면 된다.


////////////////////////////////////////////////////////////////////
/// 퍼즐 너비 우선탐색 고찰
class State{
	vector<State> getAdjacent() const;
	bool operator < (const State& rhs) const;
	bool operator == (const State& rhs) const;
};
typedef map<State, int> StateMap;

int bfs(State start, State finish){

	if (start == finish) return 0;

	StateMap c;

	queue<State> q;
	q.push(start);
	c[start] = 0;

	while (!q.empty()){
		State here = q.front();
		q.pop();
		int cost = c[here];

		vector<State> adjacent = here.getAdjacent();
		for (int i = 0; i < adjacent.size(); i++){
			if (c.count(adjacent[i]) == 0){

				if (adjacent[i] == finish) return cost + 1;
				c[adjacent[i]] = cost + 1;
				q.push(adjacent[i]);
			}
		}
	}

	return -1;
}

//////양 방향 탐색
int sgn(int x) {
	if (!x) return 0; return x > 0 ? 1 : -1;
}

int incr(int x) {
	if (x < 0) return x - 1; return x + 1;
}

int bidirectional(State start, State finish){
	map<State, int> c;

	queue < State> q;

	if (start == finish) return 0;

	q.push(start); c[start] = 1;
	q.push(finish); c[finish] = -1;

	while (!q.empty()){
		State here = q.front();
		q.pop();

		vector<State> adjacent = here.getAdjacent();
		for (int i = 0; i < adjacent.size(); i++){
			map<State, int>::iterator it = c.find(adjacent[i]);
			if (it == c.end()){
				c[adjacent[i]] = incr(c[here]);
				q.push(adjacent[i]);
			}

			else if (sgn(it->second != sgn(c[here]))
				return abs(it->second) + abs(c[here]) - 1;
		}
	}

	return -1;
}


////점점 깊어지는 탐색 알고리즘 ids

int best;

void dfs(State here, const State& finish, int steps){
	if (steps >= best) return;

	if (here == finish) {
		best = steps; return;
	}

	vector<State> adjacent = here.getAdjacent();
	for (int i = 0; i < adjacent.size(); i++)
		dfs(adjacent[i], finish, steps + 1);
}

int ids(State start, State finish, int growthStep){
	for (int limit = 4;; limit += growthStep){
		best = limit + 1;
		dfs(start, finish, 0);
		if (best <= limit)
			return best;
	}
	return -1;
}

////////////////////////////////////////////////////////////////


/////////다익스트라 알고리즘 dijkstra's algorithm
int V;
vector<pair<int, int> > adj[MAX_V];
vector<int> dijkstra(int src){
	vector<int> dist(V, INF);
	dist[src] = 0;
	priority_queue<pair<int, int> > pq; //max가 top에 감 그래서 그래프에 가중치를 전부 -로 둠
	//아니면
	//pritority_queue<pair<int,int>, vector<pair<int,int> >, greater<pair<int,int> > > pq;
	pq.push(make_pair(0, src));
	while (!pq.empty()) {
		int cost = -pq.top().first;
		int here = pq.top().second;

		pq.pop();

		if (dist[here] < cost) continue;

		for (int i = 0; i<adj[here].size(); i++){
			int there = adj[here][i].first;
			int nextDist = cost + adj[here][i].second;

			if (dist[there] > nextDist){
				dist[there] = nextDist;
				pq.push(make_pair(-nextDist, there));
			}
		}	
	}
	return dist;
}



/////////////벨만-포드 알고리즘 bellman-ford algorithm
int V;
vector<pair<int, int> > adj[MAX_V];
//음수 사이클이 있을 경우 텅 빈 배열을 반환
vector<int> bellmanFord(int src){

	vector<int> upper(V, INF);
	upper[src] = 0;
	bool updated;

	for (int iter = 0; iter < V; iter++){
		updated = false;
		for (int here = 0; here < V; here++){
			for (int i = 0; i < adj[here].size(); i++){
				int there = adj[here][i].first;
				int cost = adj[here][i].second;

				if (upper[there] > upper[here] + cost){

					upper[there] = upper[here] + cost;
					updated = true;
				}
			}
			//완화실패
			if (!updated) break;
		}
		if (updated) upper.clear();
		return upper;
	}
}


////////////플로이드 워셔 알고리즘 floyd algorithm
int V;
int adj[MAX_V][MAX_V}; //간선이 없으면 INF
void floyd(){
	for (int i = 0; i < V; i++) adj[i][i] = 0;

	for (int k = 0; k < V; k++)
		for (int i = 0; i < V; i++)
			//if(adj[i][k] != INF)  //이건 최적화 할때
			for (int j = 0; j < V; j++)
				adj[i][j] = min(adj[i][j], adj[i][k] + adj[k][j]);
			//adj[u][v] = adj[i][j] || (adj[i][k] && adj[k][j]) //이건 도달 가능성을 나타낼수있음. //간결해서

}


//////플로이드 경로찾기
//via[u][v] = u에서 v까지 가는 최단 경로가 경유하는 점 중 가장 번호가 큰 정점
int via[MAX_V][MAX_V];

void floyd2(){
	for (int i = 0; i < V; i++)
		adj[i][i] = 0;
	memset(via, -1, sizeof(via));
	for (int k = 0; k < V; k++){
		for (int i = 0; i < V; i++){
			for (int j = 0; j<V; j++){
				if (adj[i][j] > adj[i][k] + adj[k][j]){
					via[i][j] = k;
					adj[i][j] = adj[i][k] + adj[k][j];
				}
			}
		}
	}
}

void reconstruct(int u, int v, vector<int>& path){
	//기저
	if (via[u][v] == -1){
		path.push_back(u);
		if (u != v) path.push_back(v);
	}
	else{
		int w = via[u][v];
		reconstruct(u, w, path);
		path.pop_back();//w가 중복으로 들어가서 지운다.
		reconstruct(w, v, path);
	}
}

////////////////////////////////////