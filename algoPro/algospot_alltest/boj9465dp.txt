#include<iostream>
#include<fstream>
#include<string>
#include<cstring>
#include<cmath>
#include<vector>
#include<algorithm>
#include<queue>
#include<deque>
#include<limits>
#include<bitset>
#include<map>
using namespace std;

#pragma warning (disable:4996)
ifstream in("input.txt");

vector<vector<int> >sticker;
vector<vector<int> > canuse;
vector<vector<int> >cache;
int N;


void making(int line, int cur, int val){	
	if (canuse[(line + 1) % 2][cur] <= canuse[line][cur])
		canuse[(line + 1) % 2][cur] = val;
	canuse[line][cur] = val;
	if(cur !=0)
		canuse[line][cur-1] = val;
	return;
}

int tears(int line, int cur){
	if (cur == -1)
		return 0;

	int& ret = cache[line][cur];
	if (ret != -1)
		return ret;

	ret = 0;
	for (int i = cur; i >=0 ; i--)
	{
		for (int d = 0; d < 2; d++){
			if (canuse[d][i] == -1){
				making(d, i, i);
				//cout << sticker[d][i] << " ";
				ret = max(ret, sticker[d][i] + tears((d+1)%2,i - 1));
				making(d, i, -1);
			}
		}
		
	}
	return ret;
}


int main(){
#ifdef _HONG    
	freopen("input.txt", "r", stdin);
	//	freopen("output.txt","w+", stdout);
#endif
	int tc;
	cin >> tc;
	while (tc--){
		int n;
		cin >> n;
		sticker = vector<vector<int> >(2, vector<int>(n, -1));
		canuse = vector<vector<int> >(2, vector<int>(n, -1));
		cache = vector<vector<int> >(2, vector<int>(n, -1));
		N = n;

		for (int d = 0; d < 2; d++){
			for (int i = 0; i < n; i++){
				cin >> sticker[d][i];
			}
		}

		int r = tears(0,n-1);

		cout << cache[0][n-1] << endl;


	}
	return 0;
}